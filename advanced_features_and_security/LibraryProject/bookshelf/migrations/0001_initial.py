<<<<<<< HEAD
# Generated by Django 5.1.3 on 2024-11-13 09:55

import django.contrib.auth.models
=======
# Generated by Django 5.1 on 2024-08-24 11:00

>>>>>>> 16dee7aeb905a470e30d02d3bea5cea76272bc25
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
<<<<<<< HEAD
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('author', models.CharField(max_length=100)),
                ('publication_year', models.IntegerField()),
            ],
            options={
                'permissions': [('can_add_book', 'Can add book'), ('can_change_book', 'can change book'), ('can_delete_book', 'can delete book')],
            },
        ),
        migrations.CreateModel(
=======
>>>>>>> 16dee7aeb905a470e30d02d3bea5cea76272bc25
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
<<<<<<< HEAD
                ('date_of_birth', models.DateField(null=True)),
                ('profile_photo', models.ImageField(null=True, upload_to='profile_image/', verbose_name='profile picture')),
=======
                ('date_of_birth', models.DateField()),
                ('profile_photo', models.ImageField(blank=True, null=True, upload_to='profile_photos')),
>>>>>>> 16dee7aeb905a470e30d02d3bea5cea76272bc25
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
<<<<<<< HEAD
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('books', models.ManyToManyField(related_name='Libraries_found', to='bookshelf.book')),
            ],
            options={
                'permissions': [('can_view', 'can view'), ('can_create', 'can create'), ('can_edit', 'can edit'), ('can_delete', 'can delete')],
            },
=======
>>>>>>> 16dee7aeb905a470e30d02d3bea5cea76272bc25
        ),
    ]
